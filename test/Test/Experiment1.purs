module Test.Experiment1 where

import Prelude

import Data.Either (Either(..))
import Data.Unfoldable (none)
import Experiment1.Main (BuildDrv, Drv(..), Var(..), ann, app, assumption, lam, pi, piT, runBuildM, tactic, uni, uniT, (‚ñπ))
import Experiment1.Main as Lang
import Test.Common (shouldEqual)
import Test.Spec (Spec, describe, it)

var ‚à∑ Int ‚Üí BuildDrv
var x = Lang.var (Var x)

spec :: Spec Unit
spec = describe "Experiment1" do
  mkTest "(Œª (x : ùí∞) . x)"
    (lam uni (var 0))
    ( _ `shouldEqual`
        Right
          ( LamDrv { gamma: mempty, dom: uniT, cod: uniT } $
              VarDrv { gamma: uniT ‚ñπ mempty, ty: uniT } (Var 0)
          )
    )
  mkTest "((Œª (x : ùí∞) . x) ùí∞)"
    (app (lam uni (var 0)) uni)
    ( _ `shouldEqual`
        Right
          ( AppDrv { gamma: mempty, dom: uniT, cod: uniT }
              ( LamDrv { gamma: mempty, dom: uniT, cod: uniT } $
                  VarDrv { gamma: uniT ‚ñπ mempty, ty: uniT } (Var 0)
              )
              (UniDrv { gamma: mempty })
          )
    )
  mkTest "(Œª (x : ùí∞) . ($assumption :: ùí∞))"
    (lam uni (ann uniT (tactic assumption [])))
    ( _ `shouldEqual`
        Right
          ( LamDrv { gamma: mempty, dom: uniT, cod: uniT }
              $ TacticDrv { gamma: uniT ‚ñπ mempty, ty: uniT } assumption
              $ VarDrv { gamma: uniT ‚ñπ mempty, ty: uniT } (Var 0)
          )
    )

  mkTest "(Œª (x : ùí∞) . (Œª (y : Œ† ùí∞ ùí∞) . ($assumption :: ùí∞)))"
    (lam uni (lam (pi uni uni) (ann uniT (tactic assumption []))))
    ( _ `shouldEqual`
        Right
          ( LamDrv { gamma: mempty, dom: uniT, cod: piT (piT uniT uniT) uniT }
              $ LamDrv { gamma: uniT ‚ñπ mempty, dom: piT uniT uniT, cod: uniT }
              $ TacticDrv { gamma: piT uniT uniT ‚ñπ uniT ‚ñπ mempty, ty: uniT } assumption
              $ VarDrv { gamma: piT uniT uniT ‚ñπ uniT ‚ñπ mempty, ty: uniT } (Var 1)
          )
    )

  mkTest "(((Œª (x : ùí∞) . x) ùí∞) :: ùí∞)"
    (ann uniT (app (lam uni (var 0)) uni))
    ( _ `shouldEqual` Right
        (UniDrv { gamma: mempty })
    )

  where
  mkTest label mdrv f = it label do
    let err_drv = runBuildM $ mdrv mempty none
    f err_drv

